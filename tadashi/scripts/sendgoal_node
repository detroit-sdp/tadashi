#!/usr/bin/env python

import rospy
import actionlib
import socket
import time
from tadashi_helpers import *
from const import *
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Quaternion
from sensor_msgs.msg import BatteryState
from math import sqrt

class GoalClient:
	def __init__(self):
		rospy.init_node('send_goal', anonymous=True)
		self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
		self.client.wait_for_server()

		self.positiontracker = rospy.Subscriber('odom', Odometry, self.position_callback)
		self.position = Point()

		self.batterychecker = rospy.Subscriber('battery_state', BatteryState, self.battery_callback)
		self.battery_charge = 0

		self.status = STATUS[self.get_state()]
		self.state = 0

		localIP = ''
		localPort = 20001
		bufferSize = 1024

		self.tbotaddress = ('192.168.105.172', 20001)
		self.UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
		self.UDPServerSocket.bind((localIP, localPort))
		self.UDPServerSocket.settimeout(None)


	def battery_callback(self, msg):
		self.battery_charge = msg.percentage

		if self.battery_charge < 0.15:
			self.change_state(-2)


	def position_callback(self, msg):
		self.position = msg.pose.pose.position


	def send_goal(self, goal):
		if self.state == -2:
			return None

		goal.target_pose.header.stamp = rospy.Time.now()
		self.change_state(1)
		self.client.send_goal(goal)
		self.client.wait_for_result()

		if self.client.get_result():
			rospy.loginfo('Goal met')
			self.change_state(2)
		else:
			rospy.logerr('Goal not reached')
			self.change_state(-1)

		rospy.loginfo('Press [ENTER] to return to base')
		raw_input()
		returngoal = self.getbasereturn(self.client.get_result())
		returngoal.target_pose.header.stamp = rospy.Time.now()
		self.client.send_goal(returngoal)
		self.client.wait_for_result()

		if self.client.get_result():
			rospy.loginfo('Base successfully returned to')
		else:
			rospy.logerr('Base not reached: ASSISTANCE REQUIRED')


	def change_state(self, state):
		self.state = state
		message = STATUS[self.state]
		UDPServerSocket.sendto(str.encode(message), sendaddress)


	def get_goal(self, room):
		point = ROOMS[room][0]
		rotation = ROOMS[room][1]

		target = MoveBaseGoal()
		target.target_pose.header.frame_id = 'base_link'
		target.target_pose.pose.position.x, target.target_pose.pose.position.y = pointstovector((self.position.x,
																						self.position.y), point)

		if rotation == 'F':
			target.target_pose.pose.orientation.z = 0
			target.target_pose.pose.orientation.w = 1
		elif rotation == 'R':
			target.target_pose.pose.orientation.z = -0.7071
			target.target_pose.pose.orientation.w = 0.7071
		elif rotation == 'B':
			target.target_pose.pose.orientation.z = 1
			target.target_pose.pose.orientation.w = 0
		elif rotation == 'L':
			target.target_pose.pose.orientation.z = 0.7071
			target.target_pose.pose.orientation.w = 0.7071

		return target
	

	def getbasereturn(self):
		returngoal = MoveBaseGoal()
		returngoal.target_pose.header.frame_id = 'base_link'
		returngoal.target_pose.pose.position.x, returngoal.target_pose.pose.position.y = pointstovector((self.position.x,
																		self.position.y), ROOMS['BASE'][0])
		returngoal.target_pose.pose.orientation.z = 0
		returngoal.target_pose.pose.orientation.w = 1

		
		rotation = self.roomrotation()
		
		if rotation == 'B':
			returngoal.target_pose.pose.position.x = -1 * (returngoal.target_pose.pose.position.x)
			returngoal.target_pose.pose.position.y = -1 * (returngoal.target_pose.pose.position.y)
			returngoal.target_pose.pose.orientation.z = 1
			returngoal.target_pose.pose.orientation.w = 0
		elif rotation == 'L':
			returngoal.target_pose.pose.position.x = returngoal.target_pose.pose.position.y
			returngoal.target_pose.pose.position.y = returngoal.target_pose.pose.position.x
			returngoal.target_pose.pose.orientation.z = -0.7071
			returngoal.target_pose.pose.orientation.w = 0.7071
		elif rotation == 'R':
			returngoal.target_pose.pose.position.x = -1 * returngoal.target_pose.pose.position.y
			returngoal.target_pose.pose.position.y = -1 * returngoal.target_pose.pose.position.x
			returngoal.target_pose.pose.orientation.z = 0.7071
			returngoal.target_pose.pose.orientation.w = 0.7071
		
		return returngoal
	

	def roomrotation(self):
		return ROOMS[self.findnearest()][1]


	def findnearest(self):
		nearest = 'BASE'

		for room in ROOMS:
			if (sqrt((self.position.x - ROOMS[room][0][0]) ** 2 + (self.position.y - ROOMS[room][0][1]) ** 2)) < (sqrt((self.position.x - ROOMS[nearest][0][0]) ** 2 + (self.position.y - ROOMS[nearest][0][1]) ** 2)):
				nearest = room
		return nearest


	def receive_goal(self):
		while(True):
			bytesAddressPair = UDPServerSocket.recvfrom(bufferSize)

			commands = splitstringbychar(bytesAddressPair[0], ' ')
			address = bytesAddressPair[1]

			rospy.loginfo('Message from Client:{}'.format(bytesAddressPair[0]))
			rospy.loginfo('Client IP Address:{}'.format(address))

			command = commands[0]
			args = commands[1:]

			if not (command.upper() in COMMANDS):
				rospy.logerr('Command not recognised')
				continue

			if command.upper() == 'GOTO':
				target = self.get_goal(int(args[0]))
				self.send_goal(target)
				


if __name__ == '__main__':
	try:
		sndr = GoalClient()
		sndr.receive_goal()
		rospy.spin()
	except rospy.ROSInterruptException:
		rospy.logerr('Program interrupted before completion')