#!/usr/bin/env python

import rospy
import actionlib
import socket
import tadashi_helpers as th
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose, PoseWithCovarianceStamped, Twist, Point, Quaternion
class Client:
    def __init__(self):
        rospy.init_node('send_goal', anonymous=True)
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.client.wait_for_server()

    def sendGoal(self, goal):
        self.client.send_goal(goal)
        self.client.wait_for_result()

        if self.client.get_result():
            rospy.loginfo('Goal met; returning to base')
            returngoal = self.returngoal(goal)
            
            self.client.send_goal(returngoal)
            self.client.wait_for_result()
        else:
            rospy.logerr('Goal not reached')

    def returngoal(self, goal):
        inverted = MoveBaseGoal()
        inverted.target_pose.header.frame_id = "base_link"
        inverted.target_pose.header.stamp = rospy.Time.now()

        quat = {'r1' : 0.000, 'r2' : 0.000, 'r3' : 0.000, 'r4' : 1.000}
        pos = {'x': -3.6, 'y' : 2.5}
        
        inverted.target_pose.pose = Pose(Point(pos['x'], pos['y'], 0.000),
                                        Quaternion(quat['r1'], quat['r2'], quat['r3'], quat['r4']))

        return inverted

    def receiveGoal(self):
        localIP = 'localhost'   # I don't think you set this, but if failure set to '' or '127.0.0.1' 
                                # or '192.168.105.x' as shown in ifconfig

        localPort = 20001
        bufferSize = 1024

        # msgFromServer = "1"
        # bytesToSend = str.encode(msgFromServer)

        UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
        UDPServerSocket.bind((localIP, localPort))

        print('UDP server up and listening')

        while(True):
            bytesAddressPair = UDPServerSocket.recvfrom(bufferSize)

            commands = th.splitstringbychar(bytesAddressPair[0], ' ')
            address = bytesAddressPair[1]

            print('Message from Client:{}'.format(bytesAddressPair[0]))
            print('Client IP Address:{}'.format(address))

            command = commands[0]
            args = commands[1:]

            target = MoveBaseGoal()
            target.target_pose.header.frame_id = "base_link"
            target.target_pose.header.stamp = rospy.Time.now()

            quat = {'r1' : 0.000, 'r2' : 0.000, 'r3' : 0.000, 'r4' : 1.000}

            if int(args[0]) == 1:
                rospy.loginfo('Going to room 1')
                pos = {'x': 1.09, 'y' : 3}
                target.target_pose.pose = Pose(Point(pos['x'], pos['y'], 0.000),
                                     Quaternion(quat['r1'], quat['r2'], quat['r3'], quat['r4']))
            elif int(args[0]) == 2:
                rospy.loginfo('Going to room 2')
                pos = {'x': -6.13, 'y' : -2.61}
                target.target_pose.pose = Pose(Point(pos['x'], pos['y'], 0.000),
                                     Quaternion(quat['r1'], quat['r2'], quat['r3'], quat['r4']))
        
            self.sendGoal(target)
            rospy.loginfo('Goal met and returned to base')

            # address = (address[0], 20002)
            # UDPServerSocket.sendto(bytesToSend, address)
        rospy.spin()


if __name__ == '__main__':
    try:
        sndr = Client()
        sndr.receiveGoal()
    except rospy.ROSInterruptException:
        rospy.logerr('Program interrupted before completion')
